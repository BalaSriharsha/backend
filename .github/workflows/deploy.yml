name: Deploy Backend to ECR and ECS

on:
  push:
    branches: [master, main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  # AWS Resource Values from Terraform Output
  ECR_REPOSITORY_NAME: mediamint-prod
  ECS_CLUSTER_NAME: mediamint-prod
  ECS_SERVICE_NAME: mediamint-prod
  ECS_TASK_DEFINITION_NAME: mediamint-prod
  ECS_CONTAINER_NAME: mediamint-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS task definition with new image
        run: |
          # Get current task definition
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_NAME }} \
            --query 'taskDefinition' > current-task-def.json
          
          # Update the image in the task definition
          cat current-task-def.json | \
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
          '.containerDefinitions[0].image = $IMAGE' | \
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          > new-task-def.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json

      - name: Deployment Summary
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "Docker image built and pushed to ECR" >> $GITHUB_STEP_SUMMARY
          echo "Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY
          echo "ECS task definition updated with new image" >> $GITHUB_STEP_SUMMARY
          echo "Task Definition: ${{ env.ECS_TASK_DEFINITION_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Cluster: ${{ env.ECS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Tasks will be triggered on-demand from the frontend" >> $GITHUB_STEP_SUMMARY
